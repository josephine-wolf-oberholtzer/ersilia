# -*- encoding: utf-8 -*-
from abjad.tools import datastructuretools
from abjad.tools import durationtools
from abjad.tools import indicatortools
from abjad.tools import markuptools
from abjad.tools import mathtools
from abjad.tools import pitchtools
from abjad.tools import rhythmmakertools
from abjad.tools import scoretools
from abjad.tools import selectortools
from abjad.tools import spannertools
import consort


percussion_low_pedal_music_specifier = consort.tools.MusicSpecifier(
    attachment_handler=consort.tools.AttachmentHandler(
        accents=consort.tools.AttachmentExpression(
            attachments=datastructuretools.TypedList(
                [
                    indicatortools.Articulation('accent'),
                    ]
                ),
            selector=selectortools.Selector(
                callbacks=(
                    selectortools.LogicalTieSelectorCallback(
                        flatten=True,
                        pitched=False,
                        trivial=True,
                        ),
                    selectortools.SliceSelectorCallback(
                        start=1,
                        apply_to_each=False,
                        ),
                    selectortools.ItemSelectorCallback(
                        item=0,
                        apply_to_each=True,
                        ),
                    ),
                ),
            ),
        bass_drum_indication=consort.tools.AttachmentExpression(
            attachments=datastructuretools.TypedList(
                [
                    consort.tools.AttachmentExpression(
                        attachments=datastructuretools.TypedList(
                            [
                                consort.tools.ComplexTextSpanner(
                                    markup=markuptools.Markup(
                                        contents=(
                                            markuptools.MarkupCommand(
                                                'box',
                                                markuptools.MarkupCommand(
                                                    'whiteout',
                                                    markuptools.MarkupCommand(
                                                        'pad-around',
                                                        0.5,
                                                        markuptools.MarkupCommand(
                                                            'italic',
                                                            markuptools.MarkupCommand(
                                                                'smaller',
                                                                markuptools.MarkupCommand(
                                                                    'concat',
                                                                    [
                                                                        markuptools.MarkupCommand(
                                                                            'vstrut'
                                                                            ),
                                                                        'bass drum',
                                                                        ]
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                ),
                                            ),
                                        ),
                                    ),
                                ]
                            ),
                        selector=selectortools.Selector(
                            callbacks=(
                                selectortools.PrototypeSelectorCallback(
                                    prototype=scoretools.Leaf,
                                    ),
                                selectortools.RunSelectorCallback(
                                    prototype=(
                                        scoretools.Note,
                                        scoretools.Chord,
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ]
                ),
            selector=selectortools.Selector(
                callbacks=(
                    selectortools.LogicalTieSelectorCallback(
                        flatten=True,
                        pitched=False,
                        trivial=True,
                        ),
                    selectortools.PitchSelectorCallback(
                        pitches=pitchtools.PitchSet(
                            [-5]
                            ),
                        ),
                    selectortools.ContiguitySelectorCallback(),
                    selectortools.PrototypeSelectorCallback(
                        prototype=scoretools.Leaf,
                        ),
                    ),
                ),
            ),
        dynamic_expressions=consort.tools.AttachmentExpression(
            attachments=datastructuretools.TypedList(
                [
                    consort.tools.DynamicExpression(
                        dynamic_tokens=datastructuretools.CyclicTuple(
                            ['p', 'ppp', 'p', 'ppp', 'mf']
                            ),
                        division_period=2,
                        start_dynamic_tokens=datastructuretools.CyclicTuple(
                            ['o']
                            ),
                        stop_dynamic_tokens=datastructuretools.CyclicTuple(
                            ['o']
                            ),
                        transitions=datastructuretools.CyclicTuple(
                            [None]
                            ),
                        ),
                    ]
                ),
            ),
        stem_tremolo_spanner=consort.tools.AttachmentExpression(
            attachments=datastructuretools.TypedList(
                [
                    spannertools.StemTremoloSpanner(),
                    ]
                ),
            selector=selectortools.Selector(
                callbacks=(
                    selectortools.PrototypeSelectorCallback(
                        prototype=scoretools.Leaf,
                        ),
                    selectortools.RunSelectorCallback(
                        prototype=(
                            scoretools.Note,
                            scoretools.Chord,
                            ),
                        ),
                    ),
                ),
            ),
        tam_tam_indication=consort.tools.AttachmentExpression(
            attachments=datastructuretools.TypedList(
                [
                    consort.tools.AttachmentExpression(
                        attachments=datastructuretools.TypedList(
                            [
                                consort.tools.ComplexTextSpanner(
                                    markup=markuptools.Markup(
                                        contents=(
                                            markuptools.MarkupCommand(
                                                'box',
                                                markuptools.MarkupCommand(
                                                    'whiteout',
                                                    markuptools.MarkupCommand(
                                                        'pad-around',
                                                        0.5,
                                                        markuptools.MarkupCommand(
                                                            'italic',
                                                            markuptools.MarkupCommand(
                                                                'smaller',
                                                                markuptools.MarkupCommand(
                                                                    'concat',
                                                                    [
                                                                        markuptools.MarkupCommand(
                                                                            'vstrut'
                                                                            ),
                                                                        'tam',
                                                                        ]
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                ),
                                            ),
                                        ),
                                    ),
                                ]
                            ),
                        selector=selectortools.Selector(
                            callbacks=(
                                selectortools.PrototypeSelectorCallback(
                                    prototype=scoretools.Leaf,
                                    ),
                                selectortools.RunSelectorCallback(
                                    prototype=(
                                        scoretools.Note,
                                        scoretools.Chord,
                                        ),
                                    ),
                                ),
                            ),
                        ),
                    ]
                ),
            selector=selectortools.Selector(
                callbacks=(
                    selectortools.LogicalTieSelectorCallback(
                        flatten=True,
                        pitched=False,
                        trivial=True,
                        ),
                    selectortools.PitchSelectorCallback(
                        pitches=pitchtools.PitchSet(
                            [-1]
                            ),
                        ),
                    selectortools.ContiguitySelectorCallback(),
                    selectortools.PrototypeSelectorCallback(
                        prototype=scoretools.Leaf,
                        ),
                    ),
                ),
            ),
        ),
    color='red',
    labels=(),
    minimum_phrase_duration=durationtools.Duration(3, 2),
    pitch_handler=consort.tools.AbsolutePitchHandler(
        pitch_application_rate='phrase',
        pitch_specifier=consort.tools.PitchSpecifier(
            pitch_segments=(
                pitchtools.PitchSegment(
                    (
                        pitchtools.NamedPitch('g'),
                        pitchtools.NamedPitch('b'),
                        ),
                    item_class=pitchtools.NamedPitch,
                    ),
                ),
            ratio=mathtools.Ratio((1,)),
            ),
        pitches_are_nonsemantic=True,
        ),
    rhythm_maker=rhythmmakertools.EvenDivisionRhythmMaker(
        denominators=(8,),
        output_masks=rhythmmakertools.BooleanPatternInventory(
            (
                rhythmmakertools.SustainMask(
                    indices=(0, 1),
                    period=3,
                    ),
                rhythmmakertools.SustainMask(
                    indices=(0, -1),
                    ),
                )
            ),
        preferred_denominator='from_counts',
        tie_specifier=rhythmmakertools.TieSpecifier(
            tie_across_divisions=True,
            ),
        ),
    )